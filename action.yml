---
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: Kubernetes Set Context and KUBECONFIG for Service Account (SA)
author: '@vbem'
description: Create K8s context and set KUBECONFIG for service account
branding:
  icon: settings
  color: green

inputs:
  server:
    description: 'K8s cluster server URL'
    required: true    
  ca-base64:
    description: 'K8s cluster Certificate Authority data base64'
    required: true
  cluster:
    description: 'K8s cluster name'
    required: false
    default: ''
  token:
    description: 'Service Account bearer token'
    required: true
  sa:
    description: 'Service Account name'
    required: false
    default: sa
  context:
    description: 'Context name in kubeconfig'
    required: false
    default: ''
  namespace:
    description: 'Context namespace in kubeconfig'
    required: false
    default: ''
  current:
    description: 'Set as current-context in kubeconfig'
    required: false
    default: true
  kubeconfig:
    description: 'Path of kubeconfig file'
    required: false
    default: ''
  export:
    description: 'Set the KUBECONFIG environment variable available to subsequent steps'
    required: false
    default: true

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  kubeconfig:
    description: Path of kubeconfig file
    value: ${{ steps.main.outputs.path }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: composite
  steps:
    - id: main
      shell: bash
      run: |
        # implementation details
        
        # Log to stderr
        #   $1: level string
        #   $2: message string
        #   stderr: message string
        function kit::log::stderr {
            local level
            case "$1" in
                FATAL|ERR*)     level="\e[1;91m$1\e[0m" ;;
                WARN*)          level="\e[1;95m$1\e[0m" ;;
                INFO*|NOTICE)   level="\e[1;92m$1\e[0m" ;;
                DEBUG)          level="\e[1;96m$1\e[0m" ;;
                *)              level="\e[1;94m$1\e[0m" ;;
            esac
            echo -e "\e[2;97m[\e[0m$level\e[2;97m]\e[0m \e[93m$2\e[0m" >&2
            #echo "[$(date -Isecond) $1] $2" >&2
        }
        
        # Extract host from an URL
        #   $1: URL
        function kit::str::extractHost {
            local url="$1" # for Parameter Expansion & Pattern Matching
            url="${url/#*:\/\/}"
            url="${url/%:*}"
            echo -n "${url/%\/*}"
        }
        
        # Flatten JSON to key-value lines
        #   $1: separator (default as ' ðŸ‘‰ ')
        function kit::json::flatten {
            jq -Mcr --arg sep "${1:- ðŸ‘‰ }" 'paths(type!="object" and type!="array") as $p | {"key":$p|join("."),"value":getpath($p)} | "\(.key)\($sep)\(.value|@json)"'
        }
        
        # Group stdin to stdout with title
        # $1: group title
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
        function kit::wf::group {
            echo "::group::$1"      >&2
            echo "$(< /dev/stdin)"  >&2
            echo '::endgroup::'     >&2
        }
        
        # Set stdin as value to environment with given name
        # $1: environment variable name
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
        function kit::wf::env {
            local val
            val="$(< /dev/stdin)"
            echo "$1<<__GITHUB_ENV__"   >> "$GITHUB_ENV"
            echo "$val"                 >> "$GITHUB_ENV"
            echo '__GITHUB_ENV__'       >> "$GITHUB_ENV"
            kit::wf::group "ðŸ’² append '$1' to \$GITHUB_ENV" <<< "$val"
        }
        
        # Set stdin as value to output of current step with given name
        # $1: output name
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
        # https://renehernandez.io/snippets/multiline-strings-as-a-job-output-in-github-actions/
        function kit::wf::output {
            local val
            val="$(< /dev/stdin)"
            echo "::set-output name=$1::$val" >&2
            kit::wf::group "ðŸ“¤ set '$1' to step outputs" <<< "$val"
        }
        
        SERVER='${{ inputs.server }}'
        CA_BASE64='${{ inputs.ca-base64 }}'
        [[ -n '${{ inputs.cluster }}' ]] && CLUSTER='${{ inputs.cluster }}' || CLUSTER="$(kit::str::extractHost '${{ inputs.server }}')"
        TOKEN='${{ inputs.token }}'
        SA='${{ inputs.sa }}'
        [[ -n '${{ inputs.context }}' ]] && CONTEXT='${{ inputs.context }}' || CONTEXT="${{ inputs.sa }}.$CLUSTER"
        NAMESPACE='${{ inputs.namespace }}'
        CURRENT='${{ inputs.current }}'
        [[ -n '${{ inputs.kubeconfig }}' ]] && KUBECONFIG='${{ inputs.kubeconfig }}' || KUBECONFIG="${{ runner.temp }}/$CONTEXT.kubeconfig"
        EXPORT='${{ inputs.export }}'
        
        kit::wf::group 'ðŸ“¥ action inputs' << __HEREDOC__
        server:     $SERVER
        cluster:    $CLUSTER
        sa:         $SA
        context:    $CONTEXT
        namespace:  $NAMESPACE
        current:    $CURRENT
        kubeconfig: $KUBECONFIG
        export:     $EXPORT
        __HEREDOC__
        
        kit::log::stderr INFO "ðŸš¢ 'kubectl config' ... for KUBECONFIG='$KUBECONFIG'"
        declare -rx KUBECONFIG
        kubectl config set-cluster "$CLUSTER" --server="$SERVER"
        kubectl config set "clusters.$CLUSTER.certificate-authority-data" "$CA_BASE64"
        kubectl config set-credentials "$SA" --token="$TOKEN"
        kubectl config set-context "$CONTEXT" --cluster="$CLUSTER" --user="$SA" --namespace="$NAMESPACE"
        [[ "$CURRENT" == 'true' ]] && kubectl config use-context "$CONTEXT"
        
        kubectl config view --raw=false | yq -Ce | kit::wf::group "ðŸš¢ 'kubectl config view' for KUBECONFIG='$KUBECONFIG'"
        
        
...